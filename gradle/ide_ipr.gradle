apply plugin: 'idea'
apply plugin: 'eclipse'

idea {
  project {
    jdkName = '1.8'
    languageLevel = '1.8'
    ipr {
      withXml {
        def project = it.asNode()

        configureVcs project
        configureCopyright project
        configureFrameworkDetectionExcludes project
        createCodeStyleSettings project
        createCheckStyleInspections project
        createSuppressClassNeverUsedForSpringComponents project        
      }
    }
  }
}

def configureFrameworkDetectionExcludes(project) {
  def excludes = createComponentIfDoesNotExist(project, 'FrameworkDetectionExcludesConfiguration')
}

def createComponentIfDoesNotExist(project, componentName) {
  def component = findComponent project, componentName
  if (component) {
    return component
  }

  def builder = new NodeBuilder()
  project.append(
    builder.component(name: componentName) {
    }
  )

  findComponent project, componentName
}

def configureVcs(project) {
  def vcsNode = findComponent project, 'VcsDirectoryMappings'
  def mapping = vcsNode.mapping
  mapping.@directory = '$PROJECT_DIR$'
  mapping.@vcs = 'Git'
}

def configureCopyright(project) {
  def copyrightManager = findComponent project, 'CopyrightManager'

  appendCopyrightNode copyrightManager
  appendModules copyrightManager
  appendLanguageOptions copyrightManager
  appendDefaultTemplateOption copyrightManager
}

private void appendCopyrightNode(copyrightManager) {
  def copyrightBuilder = new NodeBuilder()
  def copyright = copyrightBuilder.copyright() {
    option(name: 'notice',
      value: 'ADOBE CONFIDENTIAL. Copyright $today.year Adobe Systems Incorporated. All Rights Reserved. NOTICE:' +
        ' All information contained\nherein is, and remains the property of Adobe Systems Incorporated and its' +
        ' suppliers, if any. The intellectual and\ntechnical concepts contained herein are proprietary to Adobe' +
        ' Systems Incorporated and its suppliers and are protected\nby all applicable intellectual property laws,' +
        ' including trade secret and copyright law. Dissemination of this\ninformation or reproduction of this' +
        ' material is strictly forbidden unless prior written permission is obtained\nfrom Adobe Systems Incorporated.')
    option(name: 'keyword', value: 'Copyright')
    option(name: 'allowReplaceKeyword', value: '')
    option(name: 'myName', value: 'Adobe Test&Target Copyright')
    option(name: 'myLocal', value: 'true')
  }
  copyrightManager.append copyright
}

private void appendModules(copyrightManager) {
  def module2copyright = copyrightManager.module2copyright[0]
  module2copyright.appendNode 'element', [module: 'Production', copyright: 'Adobe Test&Target Copyright']
  module2copyright.appendNode 'element', [module: 'Tests', copyright: 'Adobe Test&Target Copyright']
}

private void appendLanguageOptions(copyrightManager) {
  def languages = ['ActionScript', 'AspectJ', 'CSS', 'GSP', 'Groovy', 'HTML', 'JSP', 'JSPX', 'JavaScript', 'LESS',
                   'MXML', 'Properties', 'SASS', 'SCSS', 'SPI', 'XML']
  def languagesWithNoLinePrefix = ['HTML', 'JSP', 'JSPX', 'XML']

  languages.each { language ->
    def languageNodeBuilder = new NodeBuilder()
    def languageNode = languageNodeBuilder.LanguageOptions(name: language) {
      option(name: 'fileTypeOverride', value: '1')
      if (languagesWithNoLinePrefix.contains(language)) {
        option(name: 'prefixLines', value: 'false')
      }
    }
    copyrightManager.append languageNode
  }
}

private void appendDefaultTemplateOption(copyrightManager) {
  def defaultTemplateNodeBuilder = new NodeBuilder()
  def defaultTemplateNode = defaultTemplateNodeBuilder.LanguageOptions(name: '__TEMPLATE__') {
    option(name: 'fileTypeOverride', value: '1')
  }
  copyrightManager.append defaultTemplateNode
}

def findComponent(project, name) {
  project.component.find { it.@name == name }
}

def createSuppressClassNeverUsedForSpringComponents(project) {
  def entryPointsManager = findComponent project, 'EntryPointsManager'

  if (entryPointsManager != null) {
    return
  }

  def suppressAnnotations = ['org.springframework.context.annotation.Configuration',
    'org.springframework.stereotype.Component', 'org.springframework.stereotype.Service', 
    'org.springframework.stereotype.Repository', 'com.adobe.tnt.common.config.ConfigurablePropertySetter',
    'org.codehaus.jackson.annotate.JsonProperty']

  def builder = new NodeBuilder()
  def component = builder.component(name: 'EntryPointsManager') {
    entry_point(version: '2.0')
    list(size: suppressAnnotations.size()) {
      for (int i = 0; i < suppressAnnotations.size(); i++) {
        item(index: i, class: 'java.lang.String', itemvalue: suppressAnnotations[i])
      }
    }
  }
  project.append(component)
}

def createCheckStyleInspections(project) {
  def inspections = findComponent project, 'InspectionProjectProfileManager'

  if (inspections == null) {
    createCodeInspection(project)
  }
}

def createCodeStyleSettings(project) {
  def codeStyleSettingsManager = findComponent project, 'ProjectCodeStyleSettingsManager'
  if (codeStyleSettingsManager != null) {
    return
  }
  def builder = new NodeBuilder()
  def component = builder.component(name: 'ProjectCodeStyleSettingsManager') {
    option(name: 'PER_PROJECT_SETTINGS') {
      value() {
        XML() {
          option(name: 'XML_LEGACY_SETTINGS_IMPORTED', value: true)
        }
        codeStyleSettings(language: 'JAVA') {
          option(name: 'KEEP_BLANK_LINES_IN_DECLARATIONS', value: 1)
          option(name: 'KEEP_BLANK_LINES_IN_CODE', value: 1)
          option(name: 'KEEP_BLANK_LINES_BEFORE_RBRACE', value: 1)
          option(name: 'CALL_PARAMETERS_WRAP', value: 1)
          option(name: 'EXTENDS_LIST_WRAP', value: 1)
          option(name: 'THROWS_LIST_WRAP', value: 1)
          option(name: 'EXTENDS_KEYWORD_WRAP', value: 1)
          option(name: 'THROWS_KEYWORD_WRAP', value: 1)
          option(name: 'BINARY_OPERATION_WRAP', value: 1)
          option(name: 'TERNARY_OPERATION_WRAP', value: 1)
          option(name: 'FOR_STATEMENT_WRAP', value: 1)
          option(name: 'ARRAY_INITIALIZER_WRAP', value: 1)
          option(name: 'ASSIGNMENT_WRAP', value: 1)
          option(name: 'LABELED_STATEMENT_WRAP', value: 1)
          option(name: 'ASSERT_STATEMENT_WRAP', value: 1)
          option(name: 'PARAMETER_ANNOTATION_WRAP', value: 1)
          option(name: 'VARIABLE_ANNOTATION_WRAP', value: 1)
          option(name: 'METHOD_ANNOTATION_WRAP', value: 2)
          option(name: 'CLASS_ANNOTATION_WRAP', value: 2)
          option(name: 'FIELD_ANNOTATION_WRAP', value: 2)
          option(name: 'ALIGN_MULTILINE_PARAMETERS', value: false)
          option(name: 'CALL_PARAMETERS_LPAREN_ON_NEXT_LINE', value: false)
          option(name: 'CALL_PARAMETERS_RPAREN_ON_NEXT_LINE', value: false)
          option(name: 'METHOD_PARAMETERS_WRAP', value: 1)

          indentOptions() {
            option(name: 'INDENT_SIZE', value: 2)
            option(name: 'CONTINUATION_INDENT_SIZE', value: 2)
            option(name: 'TAB_SIZE', value: 2)
          }
        }
        option(name: 'OTHER_INDENT_OPTIONS') {
          value() {
            option(name: 'INDENT_SIZE', value: 2)
            option(name: 'CONTINUATION_INDENT_SIZE', value: 2)
            option(name: 'TAB_SIZE', value: 2)
            option(name: 'USE_TAB_CHARACTER', value: false)
            option(name: 'SMART_TABS', value: false)
            option(name: 'LABEL_INDENT_SIZE', value: 0)
            option(name: 'LABEL_INDENT_ABSOLUTE', value: false)
            option(name: 'PACKAGES_TO_USE_IMPORT_ON_DEMAND')
          }
        }
        //option(name: 'LINE_SEPARATOR', value: '&#10;')
        option(name: 'CLASS_COUNT_TO_USE_IMPORT_ON_DEMAND', value: 99)
        option(name: 'NAMES_COUNT_TO_USE_IMPORT_ON_DEMAND', value: 99)
        option(name: 'ALIGN_MULTILINE_PARAMETERS', value: false)
        option(name: 'IMPORT_LAYOUT_TABLE') {
          value() {
            createNode('package', [name: '', withSubpackages: true, static: false])
            createNode('package', [name: '', withSubpackages: true, static: true])
          }
        }
        option(name: 'RIGHT_MARGIN', value: 120)
        option(name: 'METHOD_PARAMETERS_WRAP', value: 1)
        option(name: 'ALIGN_MULTILINE_PARAMETERS', value: false)
        option(name: 'ALIGN_MULTILINE_FOR', value: false)
        option(name: 'CALL_PARAMETERS_WRAP', value: 1)
        option(name: 'EXTENDS_LIST_WRAP', value: 1)
        option(name: 'THROWS_LIST_WRAP', value: 1)
        option(name: 'EXTENDS_KEYWORD_WRAP', value: 1)
        option(name: 'THROWS_KEYWORD_WRAP', value: 1)
        option(name: 'METHOD_CALL_CHAIN_WRAP', value: 1)
        option(name: 'BINARY_OPERATION_WRAP', value: 1)
        option(name: 'TERNARY_OPERATION_WRAP', value: 1)
        option(name: 'FOR_STATEMENT_WRAP', value: 1)
        option(name: 'ARRAY_INITIALIZER_WRAP', value: 1)
        option(name: 'ASSIGNMENT_WRAP', value: 1)
        option(name: 'LABELED_STATEMENT_WRAP', value: 1)
        option(name: 'ASSERT_STATEMENT_WRAP', value: 1)
        option(name: 'METHOD_ANNOTATION_WRAP', value: 2)
        option(name: 'CLASS_ANNOTATION_WRAP', value: 2)
        option(name: 'FIELD_ANNOTATION_WRAP', value: 2)
        option(name: 'PARAMETER_ANNOTATION_WRAP', value: 1)
        option(name: 'VARIABLE_ANNOTATION_WRAP', value: 1)
        option(name: 'ENUM_CONSTANTS_WRAP', value: 1)
        codeStyleSettings(language: 'Groovy') {
          option(name: 'ALIGN_MULTILINE_PARAMETERS', value: false)
          option(name: 'ALIGN_MULTILINE_FOR', value: false)
          option(name: 'CALL_PARAMETERS_WRAP', value: 1)
          option(name: 'CALL_PARAMETERS_LPAREN_ON_NEXT_LINE', value: false)
          option(name: 'CALL_PARAMETERS_RPAREN_ON_NEXT_LINE', value: false)
          option(name: 'METHOD_PARAMETERS_WRAP', value: 1)
          option(name: 'EXTENDS_LIST_WRAP', value: 1)
          option(name: 'THROWS_LIST_WRAP', value: 1)
          option(name: 'EXTENDS_KEYWORD_WRAP', value: 1)
          option(name: 'THROWS_KEYWORD_WRAP', value: 1)
          option(name: 'METHOD_CALL_CHAIN_WRAP', value: 1)
          option(name: 'BINARY_OPERATION_WRAP', value: 1)
          option(name: 'TERNARY_OPERATION_WRAP', value: 1)
          option(name: 'FOR_STATEMENT_WRAP', value: 1)
          option(name: 'ASSIGNMENT_WRAP', value: 1)
          option(name: 'ASSERT_STATEMENT_WRAP', value: 1)
          option(name: 'METHOD_ANNOTATION_WRAP', value: 2)
          option(name: 'CLASS_ANNOTATION_WRAP', value: 2)
          option(name: 'FIELD_ANNOTATION_WRAP', value: 2)
          option(name: 'PARAMETER_ANNOTATION_WRAP', value: 1)
          option(name: 'VARIABLE_ANNOTATION_WRAP', value: 1)
          option(name: 'PARENT_SETTINGS_INSTALLED', value: true)

          indentOptions() {
            option(name: 'INDENT_SIZE', value: 2)
            option(name: 'CONTINUATION_INDENT_SIZE', value: 2)
            option(name: 'TAB_SIZE', value: 2)
          }
        }
        codeStyleSettings(language: 'JavaScript') {
          option(name: 'ALIGN_MULTILINE_PARAMETERS', value: false)
          option(name: 'ALIGN_MULTILINE_FOR', value: false)
          option(name: 'CALL_PARAMETERS_WRAP', value: 1)
          option(name: 'CALL_PARAMETERS_LPAREN_ON_NEXT_LINE', value: false)
          option(name: 'CALL_PARAMETERS_RPAREN_ON_NEXT_LINE', value: false)
          option(name: 'METHOD_PARAMETERS_WRAP', value: 1)
          option(name: 'BINARY_OPERATION_WRAP', value: 1)
          option(name: 'TERNARY_OPERATION_WRAP', value: 1)
          option(name: 'FOR_STATEMENT_WRAP', value: 1)
          option(name: 'ARRAY_INITIALIZER_WRAP', value: 1)
          option(name: 'ASSIGNMENT_WRAP', value: 1)
          option(name: 'PARENT_SETTINGS_INSTALLED', value: true)
          indentOptions() {
            option(name: 'INDENT_SIZE', value: 2)
            option(name: 'CONTINUATION_INDENT_SIZE', value: 2)
            option(name: 'TAB_SIZE', value: 2)
          }
        }
        codeStyleSettings(language: 'XML') {
          indentOptions() {
            option(name: 'INDENT_SIZE', value: 1)
            option(name: 'CONTINUATION_INDENT_SIZE', value: 1)
            option(name: 'TAB_SIZE', value: 1)
          }
        }
        codeStyleSettings(language: 'JSP') {
          indentOptions() {
            option(name: 'INDENT_SIZE', value: 1)
            option(name: 'CONTINUATION_INDENT_SIZE', value: 1)
            option(name: 'TAB_SIZE', value: 1)
          }
        }
      }
    }

    option(name: 'USE_PER_PROJECT_SETTINGS', value: true)

  }
  project.append(component)
}

private void createCodeInspection(project) {
  def inspection = project.appendNode('component', [name: 'InspectionProjectProfileManager'])

  def builder = new NodeBuilder()
  def profiles = builder.profiles {
    profile(version: '1.0', is_locked: false) {

      option(name: 'myName', value: 'Project Default')
      option(name: 'myLocal', value: false)

      inspection_tool(class: 'AbstractMethodOverridesAbstractMethod', enabled: true,
        level: 'WARNING', enabled_by_default: true)
      inspection_tool(class: 'AnonymousClassVariableHidesContainingMethodVariable', enabled: true,
        level: 'WARNING', enabled_by_default: true)
      inspection_tool(class: 'ArchaicSystemPropertyAccess', enabled: true, level: 'WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'ArrayEquality', enabled: true, level: 'WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'AssignmentToCatchBlockParameter', enabled: true, level: 'WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'AssignmentUsedAsCondition', enabled: true, level: 'WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'AutowiredDependenciesInspection', enabled: true,
        level: 'WEAK WARNING', enabled_by_default: true)
      inspection_tool(class: 'CharUsedInArithmeticContext', enabled: true, level: 'WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'ClassInTopLevelPackage', enabled: true, level: 'WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'ClassInitializer', enabled: true, level: 'WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'ClassReferencesSubclass', enabled: true, level: 'WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'CollectionAddedToSelf', enabled: true, level: 'WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'ComparableImplementedButEqualsNotOverridden', enabled: true,
        level: 'WARNING', enabled_by_default: true)
      inspection_tool(class: 'ComparisonToNaN', enabled: true, level: 'WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'ConditionalExpressionWithIdenticalBranches', enabled: true,
        level: 'WARNING', enabled_by_default: true)
      inspection_tool(class: 'ConstantAssertCondition', enabled: true, level: 'WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'ConstantValueVariableUse', enabled: true, level: 'WEAK WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'ControlFlowStatementWithoutBraces', enabled: true, level: 'WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'CovariantEquals', enabled: true, level: 'WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'EmptySynchronizedStatement', enabled: true, level: 'WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'EqualsCalledOnEnumConstant', enabled: true, level: 'WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'ExternalizableWithSerializationMethods', enabled: true,
        level: 'WARNING', enabled_by_default: true)
      inspection_tool(class: 'FieldMayBeFinal', enabled: true, level: 'WEAK WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'FinalMethodInFinalClass', enabled: true, level: 'WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'FloatingPointEquality', enabled: true, level: 'WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'IfStatementWithIdenticalBranches', enabled: true, level: 'WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'InnerClassMayBeStatic', enabled: true, level: 'WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'InstanceofThis', enabled: true, level: 'WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'IteratorHasNextCallsIteratorNext', enabled: true, level: 'WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'LabeledStatement', enabled: true, level: 'WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'LongLiteralsEndingWithLowercaseL', enabled: true, level: 'WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'MethodMayBeSynchronized', enabled: true, level: 'WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'MethodNameSameAsParentName', enabled: true, level: 'WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'MethodNamesDifferOnlyByCase', enabled: true, level: 'WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'MethodOverloadsParentMethod', enabled: true, level: 'WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'MethodOverridesPrivateMethod', enabled: true, level: 'WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'MethodOverridesStaticMethod', enabled: true, level: 'WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'MisspelledCompareTo', enabled: true, level: 'WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'MisspelledEquals', enabled: true, level: 'WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'MisspelledHashcode', enabled: true, level: 'WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'MisspelledToString', enabled: true, level: 'WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'MultipleTypedDeclaration', enabled: true, level: 'WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'NestedConditionalExpression', enabled: true, level: 'WEAK WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'NestedSwitchStatement', enabled: true, level: 'WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'NonExceptionNameEndsWithException', enabled: true, level: 'WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'NonFinalFieldInEnum', enabled: true, level: 'WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'NonFinalFieldOfException', enabled: true, level: 'WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'NonFinalUtilityClass', enabled: true, level: 'WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'NonSerializableObjectPassedToObjectStream', enabled: true,
        level: 'WARNING', enabled_by_default: true)
      inspection_tool(class: 'NonSerializableWithSerialVersionUIDField', enabled: true,
        level: 'WARNING', enabled_by_default: true)
      inspection_tool(class: 'NonSerializableWithSerializationMethods', enabled: true,
        level: 'WARNING', enabled_by_default: true)
      inspection_tool(class: 'NullThrown', enabled: true, level: 'WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'ProblematicWhitespace', enabled: true, level: 'WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'ProtectedMemberInFinalClass', enabled: true, level: 'WARNING',
        enabled_by_default: true)

      inspection_tool(class: 'ReadObjectAndWriteObjectPrivate', enabled: true, level: 'WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'ReadResolveAndWriteReplaceProtected', enabled: true, level: 'WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'RedundantFieldInitialization', enabled: true, level: 'WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'ReplaceAllDot', enabled: true, level: 'WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'ResultSetIndexZero', enabled: true, level: 'WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'SerialVersionUIDNotStaticFinal', enabled: true, level: 'WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'SetReplaceableByEnumSet', enabled: true, level: 'WEAK WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'SimplifiableEqualsExpression', enabled: true, level: 'WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'SizeReplaceableByIsEmpty', enabled: true, level: 'WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'StringEqualsEmptyString', enabled: true, level: 'WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'SystemOutErr', enabled: true, level: 'WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'TailRecursion', enabled: true, level: 'WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'ThreadDumpStack', enabled: true, level: 'WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'ThreadLocalNotStaticFinal', enabled: true, level: 'WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'ThreadRun', enabled: true, level: 'WARNING', enabled_by_default: true)
      inspection_tool(class: 'ThrowablePrintStackTrace', enabled: true, level: 'WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'ThrowablePrintedToSystemOut', enabled: true, level: 'WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'TodoComment', enabled: true, level: 'WEAK WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'AssignmentToForLoopParameter', enabled: true, level: 'WARNING',
        enabled_by_default: true) {
        option(name: 'm_checkForeachParameters', value: false)
      }
      inspection_tool(class: 'AssignmentToMethodParameter', enabled: true, level: 'WARNING',
        enabled_by_default: true) {
        option(name: 'ignoreTransformationOfOriginalParameter', value: false)
      }
      inspection_tool(class: 'Finalize', enabled: true, level: 'WARNING',
        enabled_by_default: true) {
        option(name: 'ignoreTrivialFinalizers', value: true)
      }
      inspection_tool(class: 'TypeParameterNamingConvention', enabled: true, level: 'WARNING',
        enabled_by_default: true) {
        option(name: 'm_regex', value: '[A-Z][A-Za-z\\d]*')
        option(name: 'm_minLength', value: 1)
        option(name: 'm_maxLength', value: 70)
      }
      inspection_tool(class: 'UnnecessaryExplicitNumericCast', enabled: true, level: 'WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'UnnecessaryInterfaceModifier', enabled: true, level: 'WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'UpperCaseFieldNameNotConstant', enabled: true, level: 'WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'UseOfPropertiesAsHashtable', enabled: true, level: 'WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'UtilityClassWithPublicConstructor', enabled: true, level: 'WARNING',
        enabled_by_default: true)
      inspection_tool(class: 'ConstantNamingConvention', enabled: true, level: 'WARNING',
        enabled_by_default: true) {
        option(name: 'onlyCheckImmutables', value: false)
        option(name: 'm_regex', value: '[A-Z][A-Z_\\d]*')
        option(name: 'm_minLength', value: 2)
        option(name: 'm_maxLength', value: 70)
      }
      inspection_tool(class: 'EnumeratedClassNamingConvention', enabled: true, level: 'WARNING',
        enabled_by_default: true) {
        option(name: 'm_regex', value: '[A-Z][A-Za-z\\d]*')
        option(name: 'm_minLength', value: 2)
        option(name: 'm_maxLength', value: 64)
      }
      inspection_tool(class: 'FieldHidesSuperclassField', enabled: true, level: 'WARNING',
        enabled_by_default: true) {
        option(name: 'm_ignoreInvisibleFields', value: true)
      }
      inspection_tool(class: 'InnerClassVariableHidesOuterClassVariable', enabled: true,
        level: 'WARNING', enabled_by_default: true) {
        option(name: 'm_ignoreInvisibleFields', value: true)
      }
      inspection_tool(class: 'InstanceVariableNamingConvention', enabled: true, level: 'WARNING',
        enabled_by_default: true) {
        option(name: 'm_regex', value: '[a-z][A-Za-z\\d]*')
        option(name: 'm_minLength', value: 2)
        option(name: 'm_maxLength', value: 70)
      }
      inspection_tool(class: 'LocalVariableHidingMemberVariable', enabled: true, level: 'WARNING',
        enabled_by_default: true) {
        option(name: 'm_ignoreInvisibleFields', value: true)
        option(name: 'm_ignoreStaticMethods', value: true)
      }
      inspection_tool(class: 'LoopConditionNotUpdatedInsideLoop', enabled: true, level: 'WARNING',
        enabled_by_default: true) {
        option(name: 'ignoreIterators', value: false)
      }
      inspection_tool(class: 'MethodOnlyUsedFromInnerClass', enabled: true, level: 'WARNING',
        enabled_by_default: true) {
        option(name: 'ignoreMethodsAccessedFromAnonymousClass', value: false)
        option(name: 'ignoreStaticMethodsFromNonStaticInnerClass', value: false)
        option(name: 'onlyReportStaticMethods', value: false)
      }
      inspection_tool(class: 'MissingOverrideAnnotation', enabled: true, level: 'WARNING',
        enabled_by_default: true) {
        option(name: 'ignoreObjectMethods', value: true)
        option(name: 'ignoreAnonymousClassMethods', value: false)
      }
      inspection_tool(class: 'MissortedModifiers', enabled: true, level: 'WARNING',
        enabled_by_default: true) {
        option(name: 'm_requireAnnotationsFirst', value: true)
      }
      inspection_tool(class: 'MultipleDeclaration', enabled: true, level: 'WARNING',
        enabled_by_default: true) {
        option(name: 'ignoreForLoopDeclarations', value: true)
      }
      inspection_tool(class: 'NonSerializableFieldInSerializableClass', enabled: true,
        level: 'WARNING', enabled_by_default: true) {
        option(name: 'ignorableAnnotations', enabled: true, level: 'WARNING',
          enabled_by_default: true)
        option(name: 'ignoreAnonymousInnerClasses', value: false)

      }
      inspection_tool(class: 'ObjectEquality', enabled: true, level: 'WARNING',
        enabled_by_default: true) {
        option(name: 'm_ignoreEnums', value: true)
        option(name: 'm_ignoreClassObjects', value: false)
        option(name: 'm_ignorePrivateConstructors', value: false)
      }
      inspection_tool(class: 'ObsoleteCollection', enabled: true, level: 'WARNING',
        enabled_by_default: true) {
        option(name: 'ignoreRequiredObsoleteCollectionTypes', value: false)
      }

      inspection_tool(class: 'ParameterNamingConvention', enabled: true, level: 'WARNING',
        enabled_by_default: true) {
        option(name: 'm_regex', value: '[a-z][A-Za-z\\d]*')
        option(name: 'm_minLength', value: 1)
        option(name: 'm_maxLength', value: 70)
      }
      inspection_tool(class: 'PublicField', enabled: true, level: 'WARNING',
        enabled_by_default: true) {
        option(name: 'ignoreEnums', value: false)
      }
      inspection_tool(class: 'RedundantImplements', enabled: true, level: 'WARNING',
        enabled_by_default: true) {
        option(name: 'ignoreSerializable', value: false)
        option(name: 'ignoreCloneable', value: false)
      }
      inspection_tool(class: 'SerializableHasSerialVersionUIDField', enabled: true,
        level: 'WARNING', enabled_by_default: true) {
        option(name: 'ignoreAnonymousInnerClasses', value: false)
        option(name: 'superClassString', value: null)
      }
      inspection_tool(class: 'SerializableInnerClassHasSerialVersionUIDField', enabled: true,
        level: 'WARNING', enabled_by_default: true) {
        option(name: 'ignoreAnonymousInnerClasses', value: false)
        option(name: 'superClassString', value: null)
      }
      inspection_tool(class: 'SerializableInnerClassWithNonSerializableOuterClass', enabled: true,
        level: 'WARNING', enabled_by_default: true) {
        option(name: 'ignoreAnonymousInnerClasses', value: false)
        option(name: 'superClassString', value: null)
      }
      inspection_tool(class: 'StaticVariableNamingConvention', enabled: true, level: 'WARNING',
        enabled_by_default: true) {
        option(name: 'checkMutableFinals', value: false)
        option(name: 'm_regex', value: '[a-z][A-Za-z\\d]*')
        option(name: 'm_minLength', value: 2)
        option(name: 'm_maxLength', value: 70)
      }
      inspection_tool(class: 'StringConcatenationInLoops', enabled: true, level: 'WARNING',
        enabled_by_default: true) {
        option(name: 'm_ignoreUnlessAssigned', value: true)
      }
      inspection_tool(class: 'FieldCanBeLocal', enabled: true, level: 'WARNING', enabled_by_default: true) {
        option(name: 'EXCLUDE_ANNOS') {
          value {
            list(size: 1) {
              item(index: 0, class: 'java.lang.String', itemvalue:'com.adobe.tnt.common.config.Configurable')
            }
          }
        }
        option(name: 'IGNORE_FIELDS_USED_IN_MULTIPLE_METHODS', value: true)
      }
    }
  }

  inspection.append profiles
  inspection.appendNode 'option', [name: 'PROJECT_PROFILE', value: 'Project Default']
  inspection.appendNode 'option', [name: 'USE_PROJECT_PROFILE', value: true]
}
